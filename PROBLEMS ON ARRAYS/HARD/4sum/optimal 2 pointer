class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        //O(n^3 + nlogn),O(unique Triplets)
        sort(nums.begin(),nums.end());
        int n= nums.size();
        long long g = 1e9+7;
        vector<vector<int>> v;
        for(int i=0;i<n;i++){
            if(i>0 && nums[i]==nums[i-1]) {
                continue;
            }
            for(int j=i+1;j<n;j++){
                if(j>i+1 && nums[j]==nums[j-1]){
                    continue;
                }
                int t=j+1,k=n-1;
                while(t<k){
                    long long sum=(nums[i]+nums[j])%g+(nums[t]+nums[k])%g;
                    if(sum>target){
                        k--;
                    }
                    else if(sum<target){
                        t++;
                    }
                    else{
                        v.push_back({nums[i],nums[j],nums[t],nums[k]});
                        t++;
                        k--;
                        while(t<k && nums[t]==nums[t-1]){
                            t++;
                        }
                        while(t<k && nums[k]==nums[k+1]){
                            k--;
                        }
                    }
                }
            }
        }
        return v;
    }
};

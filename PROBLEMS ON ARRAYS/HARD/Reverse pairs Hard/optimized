class Solution {
public:
    void merge(vector<int> & nums, int low,int mid,int high){
        int left=low;
        int right=mid+1;
        vector<int> v;
        while(left<=mid && right<=high){
            if(nums[left]<nums[right]){
                v.push_back(nums[left]);
                left++;
            }
            else {
                v.push_back(nums[right]);
                right++;
            }
        }
        while(left<=mid){
            v.push_back(nums[left]);
            left++;
        }
        while(right<=high){
            v.push_back(nums[right]);
            right++;
        }
        for(int i=low;i<=high;i++){
            nums[i]=v[i-low];
        }
    }
    int countPairs(vector<int> &nums,int low,int mid, int high){
        long long int k = pow(2,32)+1;
        int right=mid+1;
        int cnt=0;
        for(int i=low;i<=mid;i++){
            while(right<=high && (nums[i]%k > (2 * (nums[right]%k))%k) ){
                right++;
            }
            cnt+=right-(mid+1);
        }
        return cnt;
    }
    int mergeSort(vector<int> & nums,int low,int high){
        int cnt=0;
        if(low>=high) return cnt;
        int mid= (high+low)/2;
        cnt+=mergeSort(nums,low,mid);
        cnt+=mergeSort(nums,mid+1,high);
        cnt+= countPairs(nums,low,mid,high);
        merge(nums,low,mid,high);
        return cnt;
    }
    int reversePairs(vector<int>& nums) {
        return mergeSort(nums,0,nums.size()-1);
    }
};
